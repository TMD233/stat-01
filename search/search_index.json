{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to stat_01","text":"<p>a python package demo for stat major</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://TMD233.github.io/stat_01</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#stat_01.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>stat_01/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/TMD233/stat-01/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Stat-01 could always use more documentation, whether as part of the official Stat-01 docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/TMD233/stat-01/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up stat-01 for local development.</p> <ol> <li> <p>Fork the stat-01 repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/stat-01.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv stat-01\n$ cd stat-01/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 stat-01 tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/TMD233/stat-01/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Stat-01, run this command in your terminal:</p> <pre><code>pip install stat-01\n</code></pre> <p>This is the preferred method to install Stat-01, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install Stat-01 from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/TMD233/stat-01\n</code></pre>"},{"location":"stat_01/","title":"stat_01 module","text":"<p>Main module.</p>"},{"location":"stat_01/#stat_01.stat_01.CustomMap","title":"<code> CustomMap            (Map)         </code>","text":"<p>This class inherits from ipyleaflet.Map to add enhanced functionality, including interactive basemap selection.</p> Source code in <code>stat_01/stat_01.py</code> <pre><code>class CustomMap(Map):\n    \"\"\"\n    This class inherits from ipyleaflet.Map to add enhanced functionality, including interactive basemap selection.\n    \"\"\"\n    def __init__(self, center=(20, 0), zoom=2, **kwargs):\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.add_control(LayersControl())\n        self.initialize_ui()  \n\n    def add_basemap(self, basemap_name):\n        \"\"\"\n        Adds a predefined basemap to the map visualization based on the name provided.\n\n        Args:\n            basemap_name (str): Name of the basemap to add.\n        \"\"\"\n        basemap_options = {\n            'OpenStreetMap': basemaps.OpenStreetMap.Mapnik,\n            'OpenTopoMap': basemaps.OpenTopoMap,\n            'Esri World Imagery': basemaps.Esri.WorldImagery,\n            'CartoDB Dark Matter': basemaps.CartoDB.DarkMatter\n        }\n        layer = TileLayer(url=basemap_options.get(basemap_name, basemaps.OpenStreetMap.Mapnik)['url'], name=basemap_name)\n        self.clear_layers()\n        self.add_layer(layer)\n\n    def initialize_ui(self):\n        \"\"\"\n        Initializes UI components for interactive basemap selection.\n        \"\"\"\n        basemap_dropdown = Dropdown(\n            options=[\n                ('OpenStreetMap', 'OpenStreetMap'),\n                ('OpenTopoMap', 'OpenTopoMap'),\n                ('Esri World Imagery', 'Esri World Imagery'),\n                ('CartoDB Dark Matter', 'CartoDB Dark Matter')\n            ],\n            value='OpenStreetMap',\n            description='Basemaps:'\n        )\n\n        close_button = Button(description=\"Close Dropdown\")\n\n        dropdown_container = VBox([basemap_dropdown, close_button])\n\n        def on_basemap_change(change):\n            self.add_basemap(change['new'])\n\n        basemap_dropdown.observe(on_basemap_change, names='value')\n\n        def close_dropdown(b):\n            dropdown_container.layout.display = 'none'\n\n        close_button.on_click(close_dropdown)\n\n        self.add_control(WidgetControl(widget=dropdown_container, position='topright'))\n\n    def add_geojson(self, geojson_input):\n        \"\"\"\n        Adds GeoJSON data to the map.\n\n        Args:\n            geojson_input (str | dict): URL, file path, or dictionary containing GeoJSON data.\n        \"\"\"\n        if isinstance(geojson_input, str) and geojson_input.startswith('http'):\n            response = requests.get(geojson_input)\n            geojson_data = response.json()\n        elif isinstance(geojson_input, str):\n            with open(geojson_input) as f:\n                geojson_data = json.load(f)\n        elif isinstance(geojson_input, dict):\n            geojson_data = geojson_input\n        else:\n            raise ValueError(\"Input must be a URL, file path, or dictionary.\")\n        geojson_layer = GeoJSON(data=geojson_data)\n        self.add_layer(geojson_layer)\n\n    def add_image(self, image_path, bounds):\n        \"\"\"\n        Adds an image overlay to the map.\n\n        Args:\n            image_path (str): URL or local path to the image.\n            bounds (tuple): Bounds of the image overlay as (lat_min, lon_min, lat_max, lon_max).\n        \"\"\"\n        image_layer = ImageOverlay(url=image_path, bounds=bounds)\n        self.add_layer(image_layer)\n</code></pre>"},{"location":"stat_01/#stat_01.stat_01.CustomMap.add_basemap","title":"<code>add_basemap(self, basemap_name)</code>","text":"<p>Adds a predefined basemap to the map visualization based on the name provided.</p> <p>Parameters:</p> Name Type Description Default <code>basemap_name</code> <code>str</code> <p>Name of the basemap to add.</p> required Source code in <code>stat_01/stat_01.py</code> <pre><code>def add_basemap(self, basemap_name):\n    \"\"\"\n    Adds a predefined basemap to the map visualization based on the name provided.\n\n    Args:\n        basemap_name (str): Name of the basemap to add.\n    \"\"\"\n    basemap_options = {\n        'OpenStreetMap': basemaps.OpenStreetMap.Mapnik,\n        'OpenTopoMap': basemaps.OpenTopoMap,\n        'Esri World Imagery': basemaps.Esri.WorldImagery,\n        'CartoDB Dark Matter': basemaps.CartoDB.DarkMatter\n    }\n    layer = TileLayer(url=basemap_options.get(basemap_name, basemaps.OpenStreetMap.Mapnik)['url'], name=basemap_name)\n    self.clear_layers()\n    self.add_layer(layer)\n</code></pre>"},{"location":"stat_01/#stat_01.stat_01.CustomMap.add_geojson","title":"<code>add_geojson(self, geojson_input)</code>","text":"<p>Adds GeoJSON data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>geojson_input</code> <code>str | dict</code> <p>URL, file path, or dictionary containing GeoJSON data.</p> required Source code in <code>stat_01/stat_01.py</code> <pre><code>def add_geojson(self, geojson_input):\n    \"\"\"\n    Adds GeoJSON data to the map.\n\n    Args:\n        geojson_input (str | dict): URL, file path, or dictionary containing GeoJSON data.\n    \"\"\"\n    if isinstance(geojson_input, str) and geojson_input.startswith('http'):\n        response = requests.get(geojson_input)\n        geojson_data = response.json()\n    elif isinstance(geojson_input, str):\n        with open(geojson_input) as f:\n            geojson_data = json.load(f)\n    elif isinstance(geojson_input, dict):\n        geojson_data = geojson_input\n    else:\n        raise ValueError(\"Input must be a URL, file path, or dictionary.\")\n    geojson_layer = GeoJSON(data=geojson_data)\n    self.add_layer(geojson_layer)\n</code></pre>"},{"location":"stat_01/#stat_01.stat_01.CustomMap.add_image","title":"<code>add_image(self, image_path, bounds)</code>","text":"<p>Adds an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>image_path</code> <code>str</code> <p>URL or local path to the image.</p> required <code>bounds</code> <code>tuple</code> <p>Bounds of the image overlay as (lat_min, lon_min, lat_max, lon_max).</p> required Source code in <code>stat_01/stat_01.py</code> <pre><code>def add_image(self, image_path, bounds):\n    \"\"\"\n    Adds an image overlay to the map.\n\n    Args:\n        image_path (str): URL or local path to the image.\n        bounds (tuple): Bounds of the image overlay as (lat_min, lon_min, lat_max, lon_max).\n    \"\"\"\n    image_layer = ImageOverlay(url=image_path, bounds=bounds)\n    self.add_layer(image_layer)\n</code></pre>"},{"location":"stat_01/#stat_01.stat_01.CustomMap.initialize_ui","title":"<code>initialize_ui(self)</code>","text":"<p>Initializes UI components for interactive basemap selection.</p> Source code in <code>stat_01/stat_01.py</code> <pre><code>def initialize_ui(self):\n    \"\"\"\n    Initializes UI components for interactive basemap selection.\n    \"\"\"\n    basemap_dropdown = Dropdown(\n        options=[\n            ('OpenStreetMap', 'OpenStreetMap'),\n            ('OpenTopoMap', 'OpenTopoMap'),\n            ('Esri World Imagery', 'Esri World Imagery'),\n            ('CartoDB Dark Matter', 'CartoDB Dark Matter')\n        ],\n        value='OpenStreetMap',\n        description='Basemaps:'\n    )\n\n    close_button = Button(description=\"Close Dropdown\")\n\n    dropdown_container = VBox([basemap_dropdown, close_button])\n\n    def on_basemap_change(change):\n        self.add_basemap(change['new'])\n\n    basemap_dropdown.observe(on_basemap_change, names='value')\n\n    def close_dropdown(b):\n        dropdown_container.layout.display = 'none'\n\n    close_button.on_click(close_dropdown)\n\n    self.add_control(WidgetControl(widget=dropdown_container, position='topright'))\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use Stat-01 in a project:</p> <pre><code>import stat_01\n</code></pre>"},{"location":"Notebook/lab06/","title":"Lab06","text":""},{"location":"Notebook/lab06/#introduction","title":"Introduction\u00b6","text":"<p>\"\" This notebook introduces the functionality of our Python package developed for Lab 6. Our package aims to provide users with tools for [brief description of package purpose]. \"\"\"</p>"},{"location":"Notebook/lab06/#installation","title":"Installation\u00b6","text":"<p>\"\"\" To install the package, you can use pip: \"\"\" !pip install your-package-name</p>"},{"location":"Notebook/lab06/#importing","title":"Importing\u00b6","text":"<p>\"\"\" Import the necessary modules and classes from our package: \"\"\" from your_package_name import your_module_name</p>"},{"location":"Notebook/lab06/#main-module-functions","title":"Main Module Functions\u00b6","text":"<p>\"\"\" We have added some meaningful functions to the main module of our package. Let's demonstrate their usage: \"\"\"</p>"},{"location":"Notebook/lab06/#example-usage-of-main-module-functions","title":"Example usage of main module functions\u00b6","text":"<p>data = [1, 2, 3, 4, 5] mean = your_module_name.calculate_mean(data) variance = your_module_name.calculate_variance(data)</p> <p>print(\"Mean:\", mean) print(\"Variance:\", variance)</p>"},{"location":"Notebook/lab06/#map-class","title":"Map Class\u00b6","text":"<p>\"\"\" We have also added a Map class to our package. This class allows users to create customized maps. \"\"\"</p>"},{"location":"Notebook/lab06/#example-usage-of-map-class","title":"Example usage of Map class\u00b6","text":""},{"location":"Notebook/lab06/#create-a-custom-map-instance","title":"Create a custom map instance\u00b6","text":"<p>custom_map = your_module_name.CustomMap(center=(0, 0), zoom=10)</p>"},{"location":"Notebook/lab06/#add-a-marker-to-the-map","title":"Add a marker to the map\u00b6","text":"<p>latitude = 37.7749 longitude = -122.4194 custom_map.add_marker(latitude, longitude, popup=\"San Francisco\")</p>"},{"location":"Notebook/lab06/#show-the-map","title":"Show the map\u00b6","text":"<p>custom_map</p>"},{"location":"Notebook/lab06/#demonstration","title":"Demonstration\u00b6","text":"<p>\"\"\" Let's demonstrate the functionality of our package using a sample dataset. \"\"\"</p>"},{"location":"Notebook/lab06/#load-sample-dataset","title":"Load sample dataset\u00b6","text":""},{"location":"Notebook/lab06/#sample-data-loading-code-goes-here","title":"Sample data loading code goes here\u00b6","text":""},{"location":"Notebook/lab06/#perform-analysis-using-our-package","title":"Perform analysis using our package\u00b6","text":""},{"location":"Notebook/lab06/#analysis-code-goes-here","title":"Analysis code goes here\u00b6","text":""},{"location":"Notebook/lab06/#visualize-results","title":"Visualize results\u00b6","text":""},{"location":"Notebook/lab06/#visualization-code-goes-here","title":"Visualization code goes here\u00b6","text":""},{"location":"Notebook/lab06/#conclusion","title":"Conclusion\u00b6","text":"<p>\"\"\" In this notebook, we introduced the functionality of our Python package developed for Lab 6. We demonstrated how to use the main module functions and the Map class. We encourage users to explore our package further and provide feedback or contribute to the project. \"\"\"</p>"},{"location":"Notebook/lab4/","title":"Lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-04-17 00:17:06.703933\n</pre> In\u00a0[2]: Copied! <pre>name = \"Jing\"\n\nprint(f\"hello{name}, would you like to learn some Python today?\")\n</pre> name = \"Jing\"  print(f\"hello{name}, would you like to learn some Python today?\") <pre>helloJing, would you like to learn some Python today?\n</pre> In\u00a0[3]: Copied! <pre>name = \"Jing\" \nprint(name.lower())\nprint(name.upper())\nprint(name.title())\n</pre> name = \"Jing\"  print(name.lower()) print(name.upper()) print(name.title()) <pre>jing\nJING\nJing\n</pre> In\u00a0[4]: Copied! <pre>quote = \"A person who never made a mistake never tried anything new.\"\nauthor = \"Albert Einstein\"\nprint(f\"{author} once said, \\\"{quote}\\\"\")\n</pre> quote = \"A person who never made a mistake never tried anything new.\" author = \"Albert Einstein\" print(f\"{author} once said, \\\"{quote}\\\"\") <pre>Albert Einstein once said, \"A person who never made a mistake never tried anything new.\"\n</pre> In\u00a0[5]: Copied! <pre>name = \"\\t\\n Yueqi Jing \\n\\t\"\nprint(name)\nprint(name.lstrip())\nprint(name.rstrip())\nprint(name.strip())\n</pre> name = \"\\t\\n Yueqi Jing \\n\\t\" print(name) print(name.lstrip()) print(name.rstrip()) print(name.strip()) <pre>\t\n Yueqi Jing \n\t\nYueqi Jing \n\t\n\t\n Yueqi Jing\nYueqi Jing\n</pre> In\u00a0[6]: Copied! <pre>names = [\"Li\",\"Gao\",\"Zhang\",\"Jing\",\"sheng\"]\nfor name in names:\n    print(name)\n</pre> names = [\"Li\",\"Gao\",\"Zhang\",\"Jing\",\"sheng\"] for name in names:     print(name) <pre>Li\nGao\nZhang\nJing\nsheng\n</pre> In\u00a0[7]: Copied! <pre>Cars = [\"Bmw\",\"Buick\",\"Honda\"]\nfor car in Cars:\n    print(f\"I would like to own a {car}.\")\n</pre> Cars = [\"Bmw\",\"Buick\",\"Honda\"] for car in Cars:     print(f\"I would like to own a {car}.\") <pre>I would like to own a Bmw.\nI would like to own a Buick.\nI would like to own a Honda.\n</pre> In\u00a0[8]: Copied! <pre>Pizzas = [\"Pepperoni\",\"Cheese\",\"Sausage\",\"Meatball\"]\nprint(\"Names of my favorite pizzas:\")\nfor pizza in Pizzas:\n    print(pizza)\nprint(\"\\nSentences about my favorite pizzas:\")\nfor pizza in Pizzas:\n    print(\"I like\", pizza, \"pizza.\")\n</pre> Pizzas = [\"Pepperoni\",\"Cheese\",\"Sausage\",\"Meatball\"] print(\"Names of my favorite pizzas:\") for pizza in Pizzas:     print(pizza) print(\"\\nSentences about my favorite pizzas:\") for pizza in Pizzas:     print(\"I like\", pizza, \"pizza.\") <pre>Names of my favorite pizzas:\nPepperoni\nCheese\nSausage\nMeatball\n\nSentences about my favorite pizzas:\nI like Pepperoni pizza.\nI like Cheese pizza.\nI like Sausage pizza.\nI like Meatball pizza.\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[9]: Copied! <pre>print(\"\\nI really love pizza!\")\n</pre> print(\"\\nI really love pizza!\") <pre>\nI really love pizza!\n</pre> In\u00a0[10]: Copied! <pre>Pets = [\"Dog\",\"Cat\",\"Bird\"]\nprint(\"Names of Pets:\")\nfor animal in Pets:\n    print(animal)\nprint(\"\\nStatements about Pets:\")\nfor animal in Pets:\n    print(f\"A {animal.lower()} would make a great pet.\")\n</pre> Pets = [\"Dog\",\"Cat\",\"Bird\"] print(\"Names of Pets:\") for animal in Pets:     print(animal) print(\"\\nStatements about Pets:\") for animal in Pets:     print(f\"A {animal.lower()} would make a great pet.\") <pre>Names of Pets:\nDog\nCat\nBird\n\nStatements about Pets:\nA dog would make a great pet.\nA cat would make a great pet.\nA bird would make a great pet.\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[11]: Copied! <pre>print(\"\\nAny of these animals would make a great pet!!\")\n</pre> print(\"\\nAny of these animals would make a great pet!!\") <pre>\nAny of these animals would make a great pet!!\n</pre> In\u00a0[12]: Copied! <pre>numbers = list(range(1, 101))\nprint(\"Minimum number in the list:\", min(numbers))\nprint(\"Maximum number in the list:\", max(numbers))\nprint(\"Sum of numbers from 1 to 100:\", sum(numbers))\n</pre> numbers = list(range(1, 101)) print(\"Minimum number in the list:\", min(numbers)) print(\"Maximum number in the list:\", max(numbers)) print(\"Sum of numbers from 1 to 100:\", sum(numbers))  <pre>Minimum number in the list: 1\nMaximum number in the list: 100\nSum of numbers from 1 to 100: 5050\n</pre> In\u00a0[13]: Copied! <pre>odd_numbers = list(range(1, 21, 2))\nprint(\"Odd numbers from 1 to 20:\")\nfor number in odd_numbers:\n    print(number)\n</pre> odd_numbers = list(range(1, 21, 2)) print(\"Odd numbers from 1 to 20:\") for number in odd_numbers:     print(number) <pre>Odd numbers from 1 to 20:\n1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n</pre> In\u00a0[14]: Copied! <pre>multiples_of_3 = [num for num in range(3, 31, 3)]\nprint(\"Multiples of 3 from 3 to 30:\")\nfor number in multiples_of_3:\n    print(number)\n</pre> multiples_of_3 = [num for num in range(3, 31, 3)] print(\"Multiples of 3 from 3 to 30:\") for number in multiples_of_3:     print(number) <pre>Multiples of 3 from 3 to 30:\n3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n</pre> In\u00a0[15]: Copied! <pre>cubes = [num ** 3 for num in range(1, 11)]\nprint(\"List of the first 10 cubes:\")\nprint(cubes)\n</pre> cubes = [num ** 3 for num in range(1, 11)] print(\"List of the first 10 cubes:\") print(cubes) <pre>List of the first 10 cubes:\n[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n</pre> In\u00a0[16]: Copied! <pre>odd_numbers = list(range(1, 21, 2))\nprint(\"Odd numbers from 1 to 20:\")\nfor number in odd_numbers:\n    print(number)\nprint(\"\\nThe first three items in the list are:\")\nprint(odd_numbers[:3])\n</pre> odd_numbers = list(range(1, 21, 2)) print(\"Odd numbers from 1 to 20:\") for number in odd_numbers:     print(number) print(\"\\nThe first three items in the list are:\") print(odd_numbers[:3]) <pre>Odd numbers from 1 to 20:\n1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n\nThe first three items in the list are:\n[1, 3, 5]\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[17]: Copied! <pre>print(\"\\nThree items from the middle of the list are:\")\nmiddle_index = len(odd_numbers) // 2\nprint(odd_numbers[middle_index:middle_index + 3])\n</pre> print(\"\\nThree items from the middle of the list are:\") middle_index = len(odd_numbers) // 2 print(odd_numbers[middle_index:middle_index + 3])  <pre>\nThree items from the middle of the list are:\n[11, 13, 15]\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[18]: Copied! <pre>print(\"\\nThe last three items in the list are:\")\nprint(odd_numbers[-3:])\n</pre> print(\"\\nThe last three items in the list are:\") print(odd_numbers[-3:]) <pre>\nThe last three items in the list are:\n[15, 17, 19]\n</pre> In\u00a0[19]: Copied! <pre>foods_offered = (\"Pizza\", \"Burger\", \"Salad\", \"Pasta\", \"Soup\")\nprint(\"Foods offered by the restaurant:\")\nfor food in foods_offered:\n    print(food)\n</pre> foods_offered = (\"Pizza\", \"Burger\", \"Salad\", \"Pasta\", \"Soup\") print(\"Foods offered by the restaurant:\") for food in foods_offered:     print(food) <pre>Foods offered by the restaurant:\nPizza\nBurger\nSalad\nPasta\nSoup\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[20]: Copied! <pre>original_foods_offered = (\"Pizza\", \"Burger\", \"Salad\", \"Pasta\", \"Soup\")\n\nprint(\"Original menu:\")\nfor food in original_foods_offered:\n    print(food)\n\nrevised_foods_offered = (\"Pizza\", \"Sandwich\", \"Caesar Salad\", \"Spaghetti\", \"Soup\")\n\nprint(\"\\nRevised menu:\")\nfor food in revised_foods_offered:\n    print(food)\n</pre> original_foods_offered = (\"Pizza\", \"Burger\", \"Salad\", \"Pasta\", \"Soup\")  print(\"Original menu:\") for food in original_foods_offered:     print(food)  revised_foods_offered = (\"Pizza\", \"Sandwich\", \"Caesar Salad\", \"Spaghetti\", \"Soup\")  print(\"\\nRevised menu:\") for food in revised_foods_offered:     print(food) <pre>Original menu:\nPizza\nBurger\nSalad\nPasta\nSoup\n\nRevised menu:\nPizza\nSandwich\nCaesar Salad\nSpaghetti\nSoup\n</pre> In\u00a0[21]: Copied! <pre>alien_color = \"red\"\nif alien_color == \"green\":\n    print(\"Congratulations! You just earned 5 points.\")\n</pre> alien_color = \"red\" if alien_color == \"green\":     print(\"Congratulations! You just earned 5 points.\") In\u00a0[22]: Copied! <pre>age = 30\nif age &lt; 2:\n    print(\"The person is a baby.\")\nelif age &lt; 4:\n    print(\"The person is a toddler.\")\nelif age &lt; 13:\n    print(\"The person is a kid.\")\nelif age &lt; 20:\n    print(\"The person is a teenager.\")\nelif age &lt; 65:\n    print(\"The person is an adult.\")\nelse:\n    print(\"The person is a senior.\")\n</pre> age = 30 if age &lt; 2:     print(\"The person is a baby.\") elif age &lt; 4:     print(\"The person is a toddler.\") elif age &lt; 13:     print(\"The person is a kid.\") elif age &lt; 20:     print(\"The person is a teenager.\") elif age &lt; 65:     print(\"The person is an adult.\") else:     print(\"The person is a senior.\")  <pre>The person is an adult.\n</pre> In\u00a0[23]: Copied! <pre>favorite_fruits = [\"apple\", \"banana\", \"mango\"]\nif \"apple\" in favorite_fruits:\n    print(\"You really like apples!\")\nif \"banana\" in favorite_fruits:\n    print(\"You really like bananas!\")\nif \"orange\" in favorite_fruits:\n    print(\"You really like oranges!\")\nif \"mango\" in favorite_fruits:\n    print(\"You really like mangoes!\")\nif \"strawberry\" in favorite_fruits:\n    print(\"You really like strawberries!\")\n</pre> favorite_fruits = [\"apple\", \"banana\", \"mango\"] if \"apple\" in favorite_fruits:     print(\"You really like apples!\") if \"banana\" in favorite_fruits:     print(\"You really like bananas!\") if \"orange\" in favorite_fruits:     print(\"You really like oranges!\") if \"mango\" in favorite_fruits:     print(\"You really like mangoes!\") if \"strawberry\" in favorite_fruits:     print(\"You really like strawberries!\")  <pre>You really like apples!\nYou really like bananas!\nYou really like mangoes!\n</pre> In\u00a0[24]: Copied! <pre>usernames = [\"admin\", \"jaden\", \"alice\", \"bob\", \"emma\"]\nfor username in usernames:\n    if username == \"admin\":\n        print(\"Hello admin, would you like to see a status report?\")\n    else:\n        print(f\"Hello {username.title()}, thank you for logging in again.\")\n</pre> usernames = [\"admin\", \"jaden\", \"alice\", \"bob\", \"emma\"] for username in usernames:     if username == \"admin\":         print(\"Hello admin, would you like to see a status report?\")     else:         print(f\"Hello {username.title()}, thank you for logging in again.\")  <pre>Hello admin, would you like to see a status report?\nHello Jaden, thank you for logging in again.\nHello Alice, thank you for logging in again.\nHello Bob, thank you for logging in again.\nHello Emma, thank you for logging in again.\n</pre> In\u00a0[25]: Copied! <pre>current_users = [\"john\", \"jane\", \"alice\", \"bob\", \"emma\"]\n\nnew_users = [\"jaden\", \"emily\", \"JANE\", \"alex\", \"JOHN\"]\n\ncurrent_users_lower = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    new_user_lower = new_user.lower()\n    if new_user_lower in current_users_lower:\n        print(f\"Sorry, the username '{new_user}' is already taken. Please enter a new username.\")\n    else:\n        print(f\"The username '{new_user}' is available.\")\n</pre> current_users = [\"john\", \"jane\", \"alice\", \"bob\", \"emma\"]  new_users = [\"jaden\", \"emily\", \"JANE\", \"alex\", \"JOHN\"]  current_users_lower = [user.lower() for user in current_users]  for new_user in new_users:     new_user_lower = new_user.lower()     if new_user_lower in current_users_lower:         print(f\"Sorry, the username '{new_user}' is already taken. Please enter a new username.\")     else:         print(f\"The username '{new_user}' is available.\") <pre>The username 'jaden' is available.\nThe username 'emily' is available.\nSorry, the username 'JANE' is already taken. Please enter a new username.\nThe username 'alex' is available.\nSorry, the username 'JOHN' is already taken. Please enter a new username.\n</pre> In\u00a0[26]: Copied! <pre>numbers = list(range(1, 10))\n\nfor number in numbers:\n    if number == 1:\n        ordinal = \"st\"\n    elif number == 2:\n        ordinal = \"and, 2nd\"\n    elif number == 3:\n        ordinal = \"rd\"\n    else:\n        ordinal = \"th\"\n    print(f\"{number}{ordinal}\")\n</pre> numbers = list(range(1, 10))  for number in numbers:     if number == 1:         ordinal = \"st\"     elif number == 2:         ordinal = \"and, 2nd\"     elif number == 3:         ordinal = \"rd\"     else:         ordinal = \"th\"     print(f\"{number}{ordinal}\")  <pre>1st\n2and, 2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"Notebook/lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"Notebook/lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"Notebook/lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"Notebook/lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"Notebook/lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"Notebook/lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"Notebook/lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"Notebook/lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"Notebook/lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"Notebook/lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"Notebook/lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"Notebook/lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"Notebook/lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"Notebook/lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"Notebook/lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"Notebook/lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"Notebook/lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"Notebook/lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"Notebook/lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"Notebook/lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"Notebook/lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"Notebook/lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"Notebook/lab5/","title":"Lab5","text":"In\u00a0[1]: Copied! <pre>person_info = {\n    \"first_name\": \"yuze\",\n    \"last_name\": \"Li\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\nprint(\"First Name:\", person_info[\"first_name\"])\nprint(\"Last Name:\", person_info[\"last_name\"])\nprint(\"Age:\", person_info[\"age\"])\nprint(\"City:\", person_info[\"city\"])\n</pre> person_info = {     \"first_name\": \"yuze\",     \"last_name\": \"Li\",     \"age\": 30,     \"city\": \"New York\" } print(\"First Name:\", person_info[\"first_name\"]) print(\"Last Name:\", person_info[\"last_name\"]) print(\"Age:\", person_info[\"age\"]) print(\"City:\", person_info[\"city\"]) <pre>First Name: yuze\nLast Name: Li\nAge: 30\nCity: New York\n</pre> In\u00a0[2]: Copied! <pre>favorite_numbers = {\n    \"John\": 7,\n    \"Han\": 4,\n    \"Sarah\": 11,\n    \"Thomas\": 14,\n    \"Li\": 6\n}\n\n\nfor person, number in favorite_numbers.items():\n    print(person + \"'s favorite number is:\", number)\n</pre> favorite_numbers = {     \"John\": 7,     \"Han\": 4,     \"Sarah\": 11,     \"Thomas\": 14,     \"Li\": 6 }   for person, number in favorite_numbers.items():     print(person + \"'s favorite number is:\", number) <pre>John's favorite number is: 7\nHan's favorite number is: 4\nSarah's favorite number is: 11\nThomas's favorite number is: 14\nLi's favorite number is: 6\n</pre> In\u00a0[3]: Copied! <pre>glossary = {\n    \"variable\": \"A container for storing data value.\",\n    \"function\": \"A block of code that only runs when it is called.\",\n    \"method\": \"A function that is associated with an object in Object-Oriented Programming (OOP).\",\n    \"loop\": \"A control flow statement for specifying iteration.\",\n    \"module\": \"A file containing Python definitions and statements intended for use in other Python programs.\"\n}\n\n\nfor word, meaning in glossary.items():\n    print(word + \":\")\n    print(meaning + \"\\n\")\n</pre> glossary = {     \"variable\": \"A container for storing data value.\",     \"function\": \"A block of code that only runs when it is called.\",     \"method\": \"A function that is associated with an object in Object-Oriented Programming (OOP).\",     \"loop\": \"A control flow statement for specifying iteration.\",     \"module\": \"A file containing Python definitions and statements intended for use in other Python programs.\" }   for word, meaning in glossary.items():     print(word + \":\")     print(meaning + \"\\n\")  <pre>variable:\nA container for storing data value.\n\nfunction:\nA block of code that only runs when it is called.\n\nmethod:\nA function that is associated with an object in Object-Oriented Programming (OOP).\n\nloop:\nA control flow statement for specifying iteration.\n\nmodule:\nA file containing Python definitions and statements intended for use in other Python programs.\n\n</pre> In\u00a0[4]: Copied! <pre>glossary = {\n    \"variable\": \"A container for storing data value.\",\n    \"function\": \"A block of code that only runs when it is called.\",\n    \"method\": \"A function that is associated with an object in Object-Oriented Programming (OOP).\",\n    \"loop\": \"A control flow statement for specifying iteration.\",\n    \"module\": \"A file containing Python definitions and statements intended for use in other Python programs.\"\n}\n\n\nglossary.update({\n    \"class\": \"A blueprint for creating objects, providing initial values for state (member variables), and implementations of behavior (member functions or methods).\",\n    \"object\": \"An instance of a class. It is a basic unit of Object-Oriented Programming (OOP).\",\n    \"list\": \"A collection which is ordered and changeable.\",\n    \"inheritance\": \"A mechanism in which one class inherits the properties and behaviors of another class.\",\n    \"dictionary\": \"A collection which is unordered, changeable, and indexed.\"\n})\n\n# Loop through the glossary to print each word and its meaning\nfor word, meaning in glossary.items():\n    print(word + \":\")\n    print(meaning + \"\\n\")\n</pre> glossary = {     \"variable\": \"A container for storing data value.\",     \"function\": \"A block of code that only runs when it is called.\",     \"method\": \"A function that is associated with an object in Object-Oriented Programming (OOP).\",     \"loop\": \"A control flow statement for specifying iteration.\",     \"module\": \"A file containing Python definitions and statements intended for use in other Python programs.\" }   glossary.update({     \"class\": \"A blueprint for creating objects, providing initial values for state (member variables), and implementations of behavior (member functions or methods).\",     \"object\": \"An instance of a class. It is a basic unit of Object-Oriented Programming (OOP).\",     \"list\": \"A collection which is ordered and changeable.\",     \"inheritance\": \"A mechanism in which one class inherits the properties and behaviors of another class.\",     \"dictionary\": \"A collection which is unordered, changeable, and indexed.\" })  # Loop through the glossary to print each word and its meaning for word, meaning in glossary.items():     print(word + \":\")     print(meaning + \"\\n\") <pre>variable:\nA container for storing data value.\n\nfunction:\nA block of code that only runs when it is called.\n\nmethod:\nA function that is associated with an object in Object-Oriented Programming (OOP).\n\nloop:\nA control flow statement for specifying iteration.\n\nmodule:\nA file containing Python definitions and statements intended for use in other Python programs.\n\nclass:\nA blueprint for creating objects, providing initial values for state (member variables), and implementations of behavior (member functions or methods).\n\nobject:\nAn instance of a class. It is a basic unit of Object-Oriented Programming (OOP).\n\nlist:\nA collection which is ordered and changeable.\n\ninheritance:\nA mechanism in which one class inherits the properties and behaviors of another class.\n\ndictionary:\nA collection which is unordered, changeable, and indexed.\n\n</pre> In\u00a0[5]: Copied! <pre>rivers = {\n    \"Nile\": \"Egypt\",\n    \"Amazon\": \"Brazil\",\n    \"Yangtze\": \"China\"\n}\n\nfor river, country in rivers.items():\n    print(f\"The {river} runs through {country}.\")\n\nprint(\"\\nRivers:\")\nfor river in rivers.keys():\n    print(river)\n\nprint(\"\\nCountries:\")\nfor country in rivers.values():\n    print(country)\n</pre> rivers = {     \"Nile\": \"Egypt\",     \"Amazon\": \"Brazil\",     \"Yangtze\": \"China\" }  for river, country in rivers.items():     print(f\"The {river} runs through {country}.\")  print(\"\\nRivers:\") for river in rivers.keys():     print(river)  print(\"\\nCountries:\") for country in rivers.values():     print(country)  <pre>The Nile runs through Egypt.\nThe Amazon runs through Brazil.\nThe Yangtze runs through China.\n\nRivers:\nNile\nAmazon\nYangtze\n\nCountries:\nEgypt\nBrazil\nChina\n</pre> In\u00a0[6]: Copied! <pre>cities = {\n    \"Tokyo\": {\n        \"country\": \"Japan\",\n        \"population\": \"approximately 14 million\",\n        \"fact\": \"Tokyo is the largest metropolitan area in the world.\"\n    },\n    \"New York City\": {\n        \"country\": \"United States\",\n        \"population\": \"approximately 8.4 million\",\n        \"fact\": \"New York City is often referred to as the cultural, financial, and media capital of the world.\"\n    },\n    \"London\": {\n        \"country\": \"United Kingdom\",\n        \"population\": \"approximately 9 million\",\n        \"fact\": \"London has four UNESCO World Heritage Sites: The Palace of Westminster, Westminster Abbey, the Tower of London, and Maritime Greenwich.\"\n    }\n}\n\n\nfor city, info in cities.items():\n    print(city + \":\")\n    for key, value in info.items():\n        print(f\"{key.capitalize()}: {value}\")\n    print()\n</pre> cities = {     \"Tokyo\": {         \"country\": \"Japan\",         \"population\": \"approximately 14 million\",         \"fact\": \"Tokyo is the largest metropolitan area in the world.\"     },     \"New York City\": {         \"country\": \"United States\",         \"population\": \"approximately 8.4 million\",         \"fact\": \"New York City is often referred to as the cultural, financial, and media capital of the world.\"     },     \"London\": {         \"country\": \"United Kingdom\",         \"population\": \"approximately 9 million\",         \"fact\": \"London has four UNESCO World Heritage Sites: The Palace of Westminster, Westminster Abbey, the Tower of London, and Maritime Greenwich.\"     } }   for city, info in cities.items():     print(city + \":\")     for key, value in info.items():         print(f\"{key.capitalize()}: {value}\")     print()   <pre>Tokyo:\nCountry: Japan\nPopulation: approximately 14 million\nFact: Tokyo is the largest metropolitan area in the world.\n\nNew York City:\nCountry: United States\nPopulation: approximately 8.4 million\nFact: New York City is often referred to as the cultural, financial, and media capital of the world.\n\nLondon:\nCountry: United Kingdom\nPopulation: approximately 9 million\nFact: London has four UNESCO World Heritage Sites: The Palace of Westminster, Westminster Abbey, the Tower of London, and Maritime Greenwich.\n\n</pre> In\u00a0[7]: Copied! <pre>car_preference = \"SUV\"\n\nprint(f\"Let me see if I can find you a {car_preference}.\")\n</pre> car_preference = \"SUV\"  print(f\"Let me see if I can find you a {car_preference}.\")  <pre>Let me see if I can find you a SUV.\n</pre> In\u00a0[8]: Copied! <pre>num_people = 9\n\nif num_people &gt; 8:\n    print(\"I'm sorry, but you'll have to wait for a table.\")\nelse:\n    print(\"Your table is ready.\")\n</pre> num_people = 9  if num_people &gt; 8:     print(\"I'm sorry, but you'll have to wait for a table.\") else:     print(\"Your table is ready.\")   <pre>I'm sorry, but you'll have to wait for a table.\n</pre> In\u00a0[9]: Copied! <pre>number = 11\n\nif number % 10 == 0:\n    print(f\"{number} is a multiple of 10.\")\nelse:\n    print(f\"{number} is not a multiple of 10.\")\n</pre> number = 11  if number % 10 == 0:     print(f\"{number} is a multiple of 10.\") else:     print(f\"{number} is not a multiple of 10.\")  <pre>11 is not a multiple of 10.\n</pre> In\u00a0[10]: Copied! <pre>pizza_toppings = [\"Pepperoni\", \"Mushrooms\", \"Onions\", \"Sausage\", \"Bacon\"]\n\nfor topping in pizza_toppings:\n    print(f\"Adding {topping} to your pizza.\")\n\nprint(\"Your pizza will have the following toppings:\")\nfor topping in pizza_toppings:\n    print(\"- \" + topping)\n</pre> pizza_toppings = [\"Pepperoni\", \"Mushrooms\", \"Onions\", \"Sausage\", \"Bacon\"]  for topping in pizza_toppings:     print(f\"Adding {topping} to your pizza.\")  print(\"Your pizza will have the following toppings:\") for topping in pizza_toppings:     print(\"- \" + topping)   <pre>Adding Pepperoni to your pizza.\nAdding Mushrooms to your pizza.\nAdding Onions to your pizza.\nAdding Sausage to your pizza.\nAdding Bacon to your pizza.\nYour pizza will have the following toppings:\n- Pepperoni\n- Mushrooms\n- Onions\n- Sausage\n- Bacon\n</pre> In\u00a0[11]: Copied! <pre>def display_message():\n    print(\"In this chapter, we are learning about Python basic and more functions.\")\n\ndisplay_message()\n</pre> def display_message():     print(\"In this chapter, we are learning about Python basic and more functions.\")  display_message()  <pre>In this chapter, we are learning about Python basic and more functions.\n</pre> In\u00a0[12]: Copied! <pre>def favorite_book(title):\n    print(f\"One of my favorite books is {title}.\")\n\nfavorite_book(\"pan long\")\n</pre> def favorite_book(title):     print(f\"One of my favorite books is {title}.\")  favorite_book(\"pan long\")  <pre>One of my favorite books is pan long.\n</pre> In\u00a0[13]: Copied! <pre>def make_shirt(size, message):\n    print(f\"A {size}-sized shirt will be made with the message: '{message}'.\")\n\nmake_shirt(\"medium\", \"What's up.\")\n\nmake_shirt(size=\"large\", message=\"What's up.\")\n</pre> def make_shirt(size, message):     print(f\"A {size}-sized shirt will be made with the message: '{message}'.\")  make_shirt(\"medium\", \"What's up.\")  make_shirt(size=\"large\", message=\"What's up.\")  <pre>A medium-sized shirt will be made with the message: 'What's up.'.\nA large-sized shirt will be made with the message: 'What's up.'.\n</pre> In\u00a0[14]: Copied! <pre>def make_shirt(size=\"large\", message=\"I love shirt\"):\n    print(f\"A {size}-sized shirt will be made with the message: '{message}'.\")\n\nmake_shirt()\n\nmake_shirt(size=\"medium\")\n\nmake_shirt(size=\"small\", message=\"What's up!\")\n</pre> def make_shirt(size=\"large\", message=\"I love shirt\"):     print(f\"A {size}-sized shirt will be made with the message: '{message}'.\")  make_shirt()  make_shirt(size=\"medium\")  make_shirt(size=\"small\", message=\"What's up!\")  <pre>A large-sized shirt will be made with the message: 'I love shirt'.\nA medium-sized shirt will be made with the message: 'I love shirt'.\nA small-sized shirt will be made with the message: 'What's up!'.\n</pre> In\u00a0[15]: Copied! <pre>def describe_city(city, country=\"Unknown\"):\n    print(f\"{city} is in {country}.\")\n\ndescribe_city(\"knoxville\", \"United States\")\ndescribe_city(\"Shanghai\", \"China\")\ndescribe_city(\"New York City\", \"United States\")\n</pre> def describe_city(city, country=\"Unknown\"):     print(f\"{city} is in {country}.\")  describe_city(\"knoxville\", \"United States\") describe_city(\"Shanghai\", \"China\") describe_city(\"New York City\", \"United States\")  <pre>knoxville is in United States.\nShanghai is in China.\nNew York City is in United States.\n</pre> In\u00a0[16]: Copied! <pre>def city_country(city, country):\n    return f\"{city}, {country}\"\n\nprint(city_country(\"Santiago\", \"Chile\"))\nprint(city_country(\"Paris\", \"France\"))\nprint(city_country(\"Shanghai\", \"China\"))\n</pre> def city_country(city, country):     return f\"{city}, {country}\"  print(city_country(\"Santiago\", \"Chile\")) print(city_country(\"Paris\", \"France\")) print(city_country(\"Shanghai\", \"China\"))  <pre>Santiago, Chile\nParis, France\nShanghai, China\n</pre> In\u00a0[17]: Copied! <pre>def make_album(artist_name, album_title, number_of_songs=None):\n    album = {\n        \"artist\": artist_name,\n        \"title\": album_title\n    }\n    if number_of_songs:\n        album[\"number_of_songs\"] = number_of_songs\n    return album\n\nalbum1 = make_album(\"Jay\", \"F\")\nprint(album1)\n\nalbum2 = make_album(\"TT\", \"B\", 12)\nprint(album2)\n\nalbum3 = make_album(\"Miz\", \"C\", 8)\nprint(album3)\n</pre> def make_album(artist_name, album_title, number_of_songs=None):     album = {         \"artist\": artist_name,         \"title\": album_title     }     if number_of_songs:         album[\"number_of_songs\"] = number_of_songs     return album  album1 = make_album(\"Jay\", \"F\") print(album1)  album2 = make_album(\"TT\", \"B\", 12) print(album2)  album3 = make_album(\"Miz\", \"C\", 8) print(album3)  <pre>{'artist': 'Jay', 'title': 'F'}\n{'artist': 'TT', 'title': 'B', 'number_of_songs': 12}\n{'artist': 'Miz', 'title': 'C', 'number_of_songs': 8}\n</pre> In\u00a0[18]: Copied! <pre>def make_album(artist_name, album_title):\n    return {\"artist\": artist_name, \"title\": album_title}\n\nalbums = [\n    (\"Jay\", \"A\"),\n    (\"TT\", \"B\"),\n    (\"Wiz\", \"C\")\n]\n\nfor artist, title in albums:\n    album_info = make_album(artist, title)\n    print(album_info)\n</pre> def make_album(artist_name, album_title):     return {\"artist\": artist_name, \"title\": album_title}  albums = [     (\"Jay\", \"A\"),     (\"TT\", \"B\"),     (\"Wiz\", \"C\") ]  for artist, title in albums:     album_info = make_album(artist, title)     print(album_info)   <pre>{'artist': 'Jay', 'title': 'A'}\n{'artist': 'TT', 'title': 'B'}\n{'artist': 'Wiz', 'title': 'C'}\n</pre> In\u00a0[19]: Copied! <pre>def show_messages(messages):\n    for message in messages:\n        print(message)\n\nmessages = [\n    \"Hello, how are you?\",\n    \"Don't forget to buy groceries.\",\n    \"Meeting at 3 PM today.\",\n    \"Happy birthday!\"\n]\n\nshow_messages(messages)\n</pre> def show_messages(messages):     for message in messages:         print(message)  messages = [     \"Hello, how are you?\",     \"Don't forget to buy groceries.\",     \"Meeting at 3 PM today.\",     \"Happy birthday!\" ]  show_messages(messages)  <pre>Hello, how are you?\nDon't forget to buy groceries.\nMeeting at 3 PM today.\nHappy birthday!\n</pre> In\u00a0[20]: Copied! <pre>def send_messages(messages):\n    sent_messages = []  \n    for message in messages:\n        print(message)\n        sent_messages.append(message)\n    return sent_messages\n\nmessages = [\n    \"Hello, how are you?\",\n    \"Don't forget to buy groceries.\",\n    \"Meeting at 3 PM today.\",\n    \"Happy birthday!\"\n]\n\nsent_messages = send_messages(messages)\n\nprint(\"\\nOriginal messages list:\")\nprint(messages)\nprint(\"\\nSent messages list:\")\nprint(sent_messages)\n</pre> def send_messages(messages):     sent_messages = []       for message in messages:         print(message)         sent_messages.append(message)     return sent_messages  messages = [     \"Hello, how are you?\",     \"Don't forget to buy groceries.\",     \"Meeting at 3 PM today.\",     \"Happy birthday!\" ]  sent_messages = send_messages(messages)  print(\"\\nOriginal messages list:\") print(messages) print(\"\\nSent messages list:\") print(sent_messages)  <pre>Hello, how are you?\nDon't forget to buy groceries.\nMeeting at 3 PM today.\nHappy birthday!\n\nOriginal messages list:\n['Hello, how are you?', \"Don't forget to buy groceries.\", 'Meeting at 3 PM today.', 'Happy birthday!']\n\nSent messages list:\n['Hello, how are you?', \"Don't forget to buy groceries.\", 'Meeting at 3 PM today.', 'Happy birthday!']\n</pre> In\u00a0[21]: Copied! <pre>with open('learning_python.txt') as file_object:\n    contents = file_object.read()\n    print(\"Reading the entire file:\")\n    print(contents)\n\nprint(\"\\nReading line by line:\")\nwith open('learning_python.txt') as file_object:\n    for line in file_object:\n        print(line.strip())\n\nprint(\"\\nReading using a list:\")\nwith open('learning_python.txt') as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    print(line.strip())\n</pre> with open('learning_python.txt') as file_object:     contents = file_object.read()     print(\"Reading the entire file:\")     print(contents)  print(\"\\nReading line by line:\") with open('learning_python.txt') as file_object:     for line in file_object:         print(line.strip())  print(\"\\nReading using a list:\") with open('learning_python.txt') as file_object:     lines = file_object.readlines()  for line in lines:     print(line.strip())  <pre>Reading the entire file:\nIn Python you can build you code.\nIn Python you can clean data.\nIn Python you can create data\nIn Python you can create function.\nIn Python you can have fun.\nIn Python you can find data stat.\n\nReading line by line:\nIn Python you can build you code.\nIn Python you can clean data.\nIn Python you can create data\nIn Python you can create function.\nIn Python you can have fun.\nIn Python you can find data stat.\n\nReading using a list:\nIn Python you can build you code.\nIn Python you can clean data.\nIn Python you can create data\nIn Python you can create function.\nIn Python you can have fun.\nIn Python you can find data stat.\n</pre> In\u00a0[22]: Copied! <pre>with open('learning_python.txt') as file_object:\n    for line in file_object:\n        modified_line = line.replace('Python', 'R')\n        print(modified_line.rstrip())\n</pre> with open('learning_python.txt') as file_object:     for line in file_object:         modified_line = line.replace('Python', 'R')         print(modified_line.rstrip())   <pre>In R you can build you code.\nIn R you can clean data.\nIn R you can create data\nIn R you can create function.\nIn R you can have fun.\nIn R you can find data stat.\n</pre> In\u00a0[23]: Copied! <pre>name = \"John Li\"\n\nwith open('guest.txt', 'w') as file_object:\n    file_object.write(name)\n\nprint(\"Your name has been written to guest.txt.\")\n</pre> name = \"John Li\"  with open('guest.txt', 'w') as file_object:     file_object.write(name)  print(\"Your name has been written to guest.txt.\")  <pre>Your name has been written to guest.txt.\n</pre> In\u00a0[24]: Copied! <pre>names = [\"Alice\", \"Bob\", \"Charlie\"]\n\nfor name in names:\n    if name.lower() == 'quit':\n        break\n\n    print(f\"Welcome, {name}!\")\n\n    with open('guest_book.txt', 'a') as file_object:\n        file_object.write(f\"{name}\\n\")\n\nprint(\"Thank you for visiting!\")\n</pre> names = [\"Alice\", \"Bob\", \"Charlie\"]  for name in names:     if name.lower() == 'quit':         break      print(f\"Welcome, {name}!\")      with open('guest_book.txt', 'a') as file_object:         file_object.write(f\"{name}\\n\")  print(\"Thank you for visiting!\")   <pre>Welcome, Alice!\nWelcome, Bob!\nWelcome, Charlie!\nThank you for visiting!\n</pre> In\u00a0[25]: Copied! <pre>reasons = [\"It's creative.\", \"It's challenging.\", \"It's useful.\"]\n\nfor reason in reasons:\n    if reason.lower() == 'quit':\n        break\n\n    with open('programming_reasons.txt', 'a') as file_object:\n        file_object.write(f\"{reason}\\n\")\n\nprint(\"Thank you for sharing your reasons!\")\n</pre> reasons = [\"It's creative.\", \"It's challenging.\", \"It's useful.\"]  for reason in reasons:     if reason.lower() == 'quit':         break      with open('programming_reasons.txt', 'a') as file_object:         file_object.write(f\"{reason}\\n\")  print(\"Thank you for sharing your reasons!\")  <pre>Thank you for sharing your reasons!\n</pre> In\u00a0[26]: Copied! <pre>try:\n    num1 = 5\n    num2 = 10\n\n    result = num1 + num2\n    print(f\"The sum of {num1} and {num2} is {result}.\")\nexcept ValueError:\n    print(\"Error: Please enter valid numerical inputs.\")\n\nprint(\"Program finished.\")\n</pre> try:     num1 = 5     num2 = 10      result = num1 + num2     print(f\"The sum of {num1} and {num2} is {result}.\") except ValueError:     print(\"Error: Please enter valid numerical inputs.\")  print(\"Program finished.\")   <pre>The sum of 5 and 10 is 15.\nProgram finished.\n</pre> In\u00a0[27]: Copied! <pre>numbers = [(5, 10), (15, 20), (25, 30)]\n\nfor num1, num2 in numbers:\n    try:\n        result = num1 + num2\n        print(f\"The sum of {num1} and {num2} is {result}.\")\n    except ValueError:\n        print(\"Error: Please enter valid numerical inputs.\")\n    else:\n        # Simulated choice\n        choice = 'yes'  # Assuming the user wants to continue\n        if choice.lower() != 'yes':\n            break\n\nprint(\"Program finished.\")\n</pre> numbers = [(5, 10), (15, 20), (25, 30)]  for num1, num2 in numbers:     try:         result = num1 + num2         print(f\"The sum of {num1} and {num2} is {result}.\")     except ValueError:         print(\"Error: Please enter valid numerical inputs.\")     else:         # Simulated choice         choice = 'yes'  # Assuming the user wants to continue         if choice.lower() != 'yes':             break  print(\"Program finished.\")   <pre>The sum of 5 and 10 is 15.\nThe sum of 15 and 20 is 35.\nThe sum of 25 and 30 is 55.\nProgram finished.\n</pre> In\u00a0[28]: Copied! <pre>file_names = ['cats.txt', 'dogs.txt']\n\nfor file_name in file_names:\n    try:\n        with open(file_name) as file_object:\n            print(f\"Contents of {file_name}:\")\n            contents = file_object.read()\n            print(contents)\n    except FileNotFoundError:\n        print(f\"Sorry, the file '{file_name}' does not exist or is in a different location.\")\n</pre> file_names = ['cats.txt', 'dogs.txt']  for file_name in file_names:     try:         with open(file_name) as file_object:             print(f\"Contents of {file_name}:\")             contents = file_object.read()             print(contents)     except FileNotFoundError:         print(f\"Sorry, the file '{file_name}' does not exist or is in a different location.\")    <pre>Contents of cats.txt:\nSiamese\nPersian\nMaine Coon\nContents of dogs.txt:\nLabrador Retriever\nGerman Shepherd\nGolden Retriever\n</pre> In\u00a0[29]: Copied! <pre>file_names = ['cats.txt', 'dogs.txt']\n\nfor file_name in file_names:\n    try:\n        with open(file_name) as file_object:\n            print(f\"Contents of {file_name}:\")\n            contents = file_object.read()\n            print(contents)\n    except FileNotFoundError:\n        pass  \nprint(\"Program finished.\")\n</pre> file_names = ['cats.txt', 'dogs.txt']  for file_name in file_names:     try:         with open(file_name) as file_object:             print(f\"Contents of {file_name}:\")             contents = file_object.read()             print(contents)     except FileNotFoundError:         pass   print(\"Program finished.\")  <pre>Contents of cats.txt:\nSiamese\nPersian\nMaine Coon\nContents of dogs.txt:\nLabrador Retriever\nGerman Shepherd\nGolden Retriever\nProgram finished.\n</pre> In\u00a0[30]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[30]: <pre>2</pre> In\u00a0[31]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[31]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[32]: Copied! <pre>def count_word_occurrences(file_name, word):\n    with open(file_name, 'r', encoding='utf-8') as file:\n        text = file.read()\n        text_lower = text.lower()\n        count_with_space = text_lower.count(f' {word} ')\n        count_at_beginning = text_lower.startswith(word)\n        count_at_end = text_lower.endswith(word)\n        total_count = text_lower.count(word)\n        return count_with_space, count_at_beginning, count_at_end, total_count\n\nfile_names = ['book.txt']  \n\nword = 'there'\n\nfor file_name in file_names:\n    count_with_space, count_at_beginning, count_at_end, total_count = count_word_occurrences(file_name, word)\n    print(f\"File: {file_name}\")\n    print(f\"Occurrences of ' {word} ': {count_with_space}\")\n    print(f\"Occurrences of '{word}' at the beginning: {count_at_beginning}\")\n    print(f\"Occurrences of '{word}' at the end: {count_at_end}\")\n    print(f\"Total occurrences of '{word}': {total_count}\")\n    print()\n</pre> def count_word_occurrences(file_name, word):     with open(file_name, 'r', encoding='utf-8') as file:         text = file.read()         text_lower = text.lower()         count_with_space = text_lower.count(f' {word} ')         count_at_beginning = text_lower.startswith(word)         count_at_end = text_lower.endswith(word)         total_count = text_lower.count(word)         return count_with_space, count_at_beginning, count_at_end, total_count  file_names = ['book.txt']    word = 'there'  for file_name in file_names:     count_with_space, count_at_beginning, count_at_end, total_count = count_word_occurrences(file_name, word)     print(f\"File: {file_name}\")     print(f\"Occurrences of ' {word} ': {count_with_space}\")     print(f\"Occurrences of '{word}' at the beginning: {count_at_beginning}\")     print(f\"Occurrences of '{word}' at the end: {count_at_end}\")     print(f\"Total occurrences of '{word}': {total_count}\")     print()  <pre>File: book.txt\nOccurrences of ' there ': 1\nOccurrences of 'there' at the beginning: False\nOccurrences of 'there' at the end: False\nTotal occurrences of 'there': 4\n\n</pre>"},{"location":"Notebook/lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"Notebook/lab5/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab5</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"Notebook/lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"Notebook/lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"Notebook/lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"Notebook/lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"Notebook/lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"Notebook/lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"Notebook/lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"Notebook/lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"Notebook/lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"Notebook/lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"Notebook/lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"Notebook/lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"Notebook/lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"Notebook/lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"Notebook/lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"Notebook/lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"Notebook/lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"Notebook/lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"Notebook/lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"Notebook/lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"Notebook/lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"Notebook/lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"Notebook/lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"Notebook/lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"Notebook/lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"Notebook/lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"Notebook/lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"Notebook/lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"Notebook/lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"Notebook/lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"},{"location":"Notebook/lab7/","title":"Lab7","text":""},{"location":"Notebook/lab7/#visualizing-vector-data-with-mymaplib","title":"Visualizing Vector Data with MyMapLib\u00b6","text":"<p>This notebook demonstrates the capabilities of the <code>MyMapLib</code> package for visualizing vector data on interactive maps. <code>MyMapLib</code> supports various data formats, including GeoJSON, shapefiles, and GeoPandas GeoDataFrames. You can easily add different types of basemaps to enhance the visualization.</p>"},{"location":"Notebook/lab7/#setup","title":"Setup\u00b6","text":"<p>First, ensure you have installed the necessary packages (<code>folium</code>, <code>geopandas</code>, etc.). If you haven't, uncomment and run the following command:</p>"},{"location":"Notebook/lab7/#pip-install-folium-geopandas","title":"!pip install folium geopandas\u00b6","text":"<p>markdown</p>"},{"location":"Notebook/lab7/#importing-the-package","title":"Importing the Package\u00b6","text":"<p>Let's import the <code>Map</code> class from our package.</p> <p>from mymaplib import Map markdown</p>"},{"location":"Notebook/lab7/#creating-a-map-instance","title":"Creating a Map Instance\u00b6","text":"<p>Create a map instance with a default location and zoom level.</p> <p>mymap = Map(location=[40.7128, -74.0060], zoom_start=10)  # Example: New York City markdown</p>"},{"location":"Notebook/lab7/#adding-a-basemap","title":"Adding a Basemap\u00b6","text":"<p>You can add different types of basemaps to your map. Here, we add the OpenStreetMap basemap.</p> <p>mymap.add_basemap('OpenStreetMap') markdown</p>"},{"location":"Notebook/lab7/#displaying-the-map","title":"Displaying the Map\u00b6","text":"<p>Let's display the map with the added basemap.</p> <p>mymap.show() markdown</p>"},{"location":"Notebook/lab7/#adding-geojson-data","title":"Adding GeoJSON Data\u00b6","text":"<p>Now, we will add GeoJSON data to our map. This could be from a local file, a dictionary, or a URL.</p>"},{"location":"Notebook/lab7/#example-adding-geojson-from-a-dictionary","title":"Example: Adding GeoJSON from a dictionary\u00b6","text":"<p>geojson_example = { \"type\": \"FeatureCollection\", \"features\": [ { \"type\": \"Feature\", \"properties\": {}, \"geometry\": { \"type\": \"Point\", \"coordinates\": [-74.0060, 40.7128] } } ] }</p> <p>mymap.add_geojson(geojson_example) markdown</p>"},{"location":"Notebook/lab7/#adding-a-shapefile","title":"Adding a Shapefile\u00b6","text":"<p>To add shapefile data, provide the path to the local file or a URL to a zipped shapefile.</p>"},{"location":"Notebook/lab7/#example-adding-a-shapefile-adjust-the-path-or-url-as-needed","title":"Example: Adding a shapefile (Adjust the path or URL as needed)\u00b6","text":""},{"location":"Notebook/lab7/#mymapadd_shppathtoyourshapefileshp","title":"mymap.add_shp('path/to/your/shapefile.shp')\u00b6","text":"<p>markdown</p>"},{"location":"Notebook/lab7/#adding-vector-data","title":"Adding Vector Data\u00b6","text":"<p>You can also add any supported vector data using the <code>add_vector</code> method. Here's how you can add a GeoDataFrame.</p> <p>import geopandas as gpd</p>"},{"location":"Notebook/lab7/#example-creating-a-geodataframe-to-add-to-the-map","title":"Example: Creating a GeoDataFrame to add to the map\u00b6","text":"<p>gdf = gpd.GeoDataFrame({ 'geometry': gpd.points_from_xy([-74.0060], [40.7128]) })</p> <p>mymap.add_vector(gdf) markdown</p>"},{"location":"Notebook/lab7/#conclusion","title":"Conclusion\u00b6","text":"<p>This notebook introduced the basic functionalities of <code>MyMapLib</code> for adding basemaps,</p>"},{"location":"Notebook/lab8/","title":"Lab8","text":"<p>cog_url = \"https://oin-hotosm.s3.amazonaws.com/5a97b8028a80730011386139/0/3041615b-2e89-4b06-8d0b-ede8896f71a9.tif\" map1 = Map(center=(20, 0), zoom=2) map1.add_raster(cog_url) map1.add_control(LayersControl()) display(map1)</p> <p>image_url = \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Earth_Eastern_Hemisphere.jpg/320px-Earth_Eastern_Hemisphere.jpg\" bounds = [(52.5, -2.0), (54, 1.0)]  # Define the geographical bounds where the image will be placed map2 = Map(center=(53.0, -1.0), zoom=5) map2.add_image(image_url, bounds) map2.add_control(LayersControl()) display(map2)</p>"},{"location":"Notebook/lab9/","title":"Lab9","text":"In\u00a0[1]: Copied! <pre>import stat_01\n</pre> import stat_01 In\u00a0[2]: Copied! <pre>from stat_01.stat_01 import CustomMap\n\n\ncustom_map = CustomMap(center=(45.5236, -122.6750), zoom=10)\ncustom_map\n</pre> from stat_01.stat_01 import CustomMap   custom_map = CustomMap(center=(45.5236, -122.6750), zoom=10) custom_map  Out[2]:"},{"location":"examples/Map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>import stat_01\n</pre> import stat_01 In\u00a0[2]: Copied! <pre>m=stat_01.Map()\nm\n</pre> m=stat_01.Map() m Out[2]:"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World.')\n</pre> print('Hello World.') <pre>Hello World.\n</pre>"}]}